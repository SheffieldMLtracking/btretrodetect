#!/usr/bin/env python

import numpy as np
from glob import glob
import argparse
import os
import json
import pickle
from btretrodetect import Retrodetect
import json
import re

parser = argparse.ArgumentParser(description='Runs the retoreflector detection algorithm')
parser.add_argument('imgpath',type=str,help='Path to images (it will recursively search for images in these paths)')
parser.add_argument('--after',required=False,type=str,help='Only process images that were created after this time HH:MM:SS')
parser.add_argument('--before',required=False,type=str,help='Only process images that were created before this time HH:MM:SS')
parser.add_argument('--refreshcache',help='Whether to refresh the cache',action="store_true")
parser.add_argument('--threshold',help='Threshold of score before adding to data (default=0)',type=str,default=0)
parser.add_argument('--sourcename',help='The name to give this source of labels (default:btretrodetect)',type=str,default='btretrodetect')
parser.add_argument('--groupby',help='Which classifier to use (either one specific to this camera, set or all data). (default: camera; choices: camera, set, all)',type=str,default='camera')

#TODO: Might want to either; (a) overwrite, (b) skip, (c) append...
#parser.add_argument('--',help='Stops it overwriting previous labels from this source (default behaviour is to do overwrite)',action="store_true") 
args = parser.parse_args()


def totalsecs(st):
    try:
        time_hms = [int(s) for s in re.findall('([0-9]{1,2})[:+]([0-9]{2})[:+]([0-9]{2})',st)[0]]
    except TypeError as e:
        print("Tried to find time of format HH:MM:SS in '%s'" % st)
        raise e
    return time_hms[0]*3600 + time_hms[1]*60 + time_hms[2]

after = 0
before = 1e10 #big number

if args.after is not None:
    after = totalsecs(args.after)
if args.before is not None:
    before = totalsecs(args.before)

imgpath = args.imgpath #'/home/mike/Documents/Research/rsync_bee/test/beephotos/2023-06-29'
for possiblepath in [x[0] for x in os.walk(imgpath) if '/.' not in x[0]]:
    fns = sorted(glob(possiblepath+'/*.np'))
    rd = Retrodetect()
    for i,fn in enumerate(fns):
        imgfilename = fn.split('/')[-1] #remove the path
        #print(before,totalsecs(imgfilename),after)
        if not before>totalsecs(imgfilename)>after:
            continue
        print(fn+" ",end="")
        photoitem = pickle.load(open(fn,'rb'))
        rd.process_image(photoitem,args.groupby)        
        json_list = []
        if 'imgpatches' not in photoitem:
            #print("No plausible patches in image %s." % fn)
            continue
        
        for patch in photoitem['imgpatches']:
            if patch['retrodetect_predictions']<float(args.threshold):
                print(".",end="") 
                continue #not a tag
            print("x",end="")
            json_item = {"x":int(r[1]),"y":int(r[2]), "source": args.sourcename, "version": "btretrodetect, v2.0", "label":"", "confidence": patch['retrodetect_predictions']}
            json_list.append(json_item)

        datapath = possiblepath+'/'+args.sourcename
        try:
            os.mkdir(datapath)
        except FileExistsError:
            pass
        datafilename = imgfilename[:-2]+'json'
        json.dump(json_list,open(datapath+'/'+datafilename,'w'))
        print("")
